---
files:
- name: Solution.java
  path: "/dont-get-volunteered/Solution.java"
  type: file
  editable: true
  parent: "/dont-get-volunteered"
  content: |-
    public class Solution {
        public static int solution(int src, int dest) {
            //Your code here
        }
    }
  is_new: true
  content_type: text/plain
  expiry: '2023-11-12T21:29:36.025582Z'
  duration:
- name: constraints.txt
  path: "/dont-get-volunteered/constraints.txt"
  type: file
  editable: false
  parent: "/dont-get-volunteered"
  content: |
    Java<br>====<br>
    Your code will be compiled using standard Java 8. All tests will be run by calling the solution() method inside the Solution class<br>
    <br>
    Execution time is limited.<br>
    <br>
    Wildcard imports and some specific classes are restricted (e.g. java.lang.ClassLoader). You will receive an error when you verify your solution if you have used a restricted class.<br>
    <br>
    Third-party libraries, input/output operations, spawning threads or processes and changes to the execution environment are not allowed.<br>
    <br>
    Your solution must be under 32000 characters in length including new lines and other non-printing characters.<br>
    <br>Python<br>======<br>
    Your code will run inside a Python 2.7.13 sandbox. All tests will be run by calling the solution() function.<br>
    <br>
    Standard libraries are supported except for bz2, crypt, fcntl, mmap, pwd, pyexpat, select, signal, termios, thread, time, unicodedata, zipimport, zlib.<br>
    <br>
    Input/output operations are not allowed.<br>
    <br>
    Your solution must be under 32000 characters in length including new lines and other non-printing characters.<br>
  content_type: text/html
  expiry: '2023-11-12T21:29:36.025582Z'
  duration:
- name: dont-get-volunteered
  path: "/dont-get-volunteered"
  type: folder
  editable: false
  parent: "/"
  content:
  expiry: '2023-11-12T21:29:36.025582Z'
  duration:
- name: journal.txt
  path: "/journal.txt"
  type: file
  editable: false
  parent: "/"
  content: Success! You've managed to infiltrate Commander Lambda's evil organization,
    and finally earned yourself an entry-level position as a Minion on their space
    station. From here, you just might be able to subvert Commander Lambda's plans
    to use the LAMBCHOP doomsday device to destroy Bunny Planet. Problem is, Minions
    are the lowest of the low in the Lambda hierarchy. Better buck up and get working,
    or you'll never make it to the top...<br><br>Next time Bunny HQ needs someone
    to infiltrate a space station to rescue bunny workers, you're going to tell them
    to make sure 'stay up for 48 hours straight scrubbing toilets' is part of the
    job description. It's only fair to warn people, after all.<br><br>You survived
    a week in Commander Lambda's organization, and you even managed to get yourself
    promoted. Hooray! Henchmen still don't have the kind of security access you'll
    need to take down Commander Lambda, though, so you'd better keep working. Chop
    chop!<br><br>The perks are definitely better as a Henchman than as a Minion. You're
    even allowed to sleep lying down!
  content_type: text/html
- name: readme.txt
  path: "/dont-get-volunteered/readme.txt"
  type: file
  editable: false
  parent: "/dont-get-volunteered"
  content: |2-

    Don&#39;t Get Volunteered!<br>======================<br>

    As a henchman on Commander Lambda&#39;s space station, you&#39;re expected to be resourceful, smart, and a quick thinker. It&#39;s not easy building a doomsday device and ordering the bunnies around at the same time, after all! In order to make sure that everyone is sufficiently quick-witted, Commander Lambda has installed new flooring outside the henchman dormitories. It looks like a chessboard, and every morning and evening you have to solve a new movement puzzle in order to cross the floor. That would be fine if you got to be the rook or the queen, but instead, you have to be the knight. Worse, if you take too much time solving the puzzle, you get &quot;volunteered&quot; as a test subject for the LAMBCHOP doomsday device!<br><br>To help yourself get to and from your bunk every day, write a function called solution(src, dest) which takes in two parameters: the source square, on which you start, and the destination square, which is where you need to land to solve the puzzle.  The function should return an integer representing the smallest number of moves it will take for you to travel from the source square to the destination square using a chess knight&#39;s moves (that is, two squares in any direction immediately followed by one square perpendicular to that direction, or vice versa, in an &quot;L&quot; shape).  Both the source and destination squares will be an integer between 0 and 63, inclusive, and are numbered like the example chessboard below:<br><br>-------------------------<br>| 0| 1| 2| 3| 4| 5| 6| 7|<br>-------------------------<br>| 8| 9|10|11|12|13|14|15|<br>-------------------------<br>|16|17|18|19|20|21|22|23|<br>-------------------------<br>|24|25|26|27|28|29|30|31|<br>-------------------------<br>|32|33|34|35|36|37|38|39|<br>-------------------------<br>|40|41|42|43|44|45|46|47|<br>-------------------------<br>|48|49|50|51|52|53|54|55|<br>-------------------------<br>|56|57|58|59|60|61|62|63|<br>-------------------------<br>

    <br>Languages<br>=========<br><br>
    To provide a Python solution, edit <span class="term-yellow">solution.py</span><br>
    To provide a Java solution, edit <span class="term-yellow">Solution.java</span><br>

    <br>Test cases<br>==========<br>
    Your code should pass the following test cases.<br>Note that it may also be run against hidden test cases not shown here.<br><br>

    -- Python cases --<br>
    Input:<br>solution.solution(19, 36)<br>Output:<br>&nbsp;&nbsp;&nbsp;&nbsp;1<br><br>

    Input:<br>solution.solution(0, 1)<br>Output:<br>&nbsp;&nbsp;&nbsp;&nbsp;3<br><br>
    -- Java cases --<br>
    Input:<br>Solution.solution(19, 36)<br>Output:<br>&nbsp;&nbsp;&nbsp;&nbsp;1<br><br>

    Input:<br>Solution.solution(0, 1)<br>Output:<br>&nbsp;&nbsp;&nbsp;&nbsp;3<br><br>


    Use <span class="term-yellow">verify [file]</span> to test your solution and see how it does.
    When you are finished editing your code, use <span class="term-yellow">submit [file]</span> to submit your answer.
    If your solution passes the test cases, it will be removed from your home folder.
  content_type: text/html
  expiry: '2023-11-12T21:29:36.025582Z'
  duration:
- name: solution.py
  path: "/dont-get-volunteered/solution.py"
  type: file
  editable: true
  parent: "/dont-get-volunteered"
  content: |-
    def solution(src, dest):
        #Your code here
  is_new: true
  content_type: text/plain
  expiry: '2023-11-12T21:29:36.025582Z'
  duration:
- name: start_here.txt
  path: "/start_here.txt"
  type: file
  editable: false
  parent: "/"
  content: Type <span class="term-yellow">request</span> to request a challenge.<br>Type
    <span class="term-yellow">help</span> for a list of commands.
  content_type: text/html
